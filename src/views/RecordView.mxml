<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="Record" viewActivate="view1_viewActivateHandler(event)"
		actionBarVisible.normal="false" tabBarVisible.normal="false">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.audio.format.WAVWriter;
			
			import flash.events.SampleDataEvent;
			import flash.media.Microphone;
			import flash.media.Sound;
			import flash.utils.ByteArray;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.ViewNavigatorEvent;
			import org.as3wavsound.WavSound;  
			import org.as3wavsound.WavSoundChannel;  
			
			[Bindable]protected var microphoneList:ArrayCollection;
			
			[Bindable]protected var isRecording:Boolean = false;
			
			[Bindable]protected var isPlaying:Boolean = false;
			
			[Bindable]protected var soundData:ByteArray;
			
			[Bindable]protected var files:ArrayCollection;
			
			protected var microphone:Microphone;
			protected var sound:Sound;
			protected var channel:SoundChannel;
			protected var storageDir:File = File.applicationStorageDirectory;
			
			
			protected function view1_viewActivateHandler(event:ViewNavigatorEvent):void
			{
				storageDir.addEventListener(FileListEvent.DIRECTORY_LISTING,onDirList);
				storageDir.getDirectoryListingAsync();
				if (Microphone.isSupported)
				{
					currentState = "normal";
					microphoneList = new ArrayCollection(Microphone.names);
					micChoices.selectedIndex=0;
				}
				else currentState = "unsupported";
			}
			
			protected function startRecording():void
			{
				isRecording = true;
				microphone = Microphone.getMicrophone(micChoices.selectedIndex);
				microphone.rate = 44;
				microphone.gain = 100;
				soundData = new ByteArray();
				trace("Recording");
				microphone.addEventListener(SampleDataEvent.SAMPLE_DATA, onSampleDataReceived);
				
			}
			
			protected function stopRecording():void
			{
				isRecording = false;
				trace("Stopped recording");
				microphone.removeEventListener(SampleDataEvent.SAMPLE_DATA, onSampleDataReceived);
				saveFile();
			}
			
			protected function onSampleDataReceived(event:SampleDataEvent):void
			{
				while(event.data.bytesAvailable)
				{
					var sample:Number = event.data.readFloat();
					soundData.writeFloat(sample);
				}
			}
			
			protected function soundCompleteHandler(event:Event):void
			{
				isPlaying = false;
			}
			
			protected function startPlaying():void
			{
				isPlaying = true
				soundData.position = 0;
				sound = new Sound();
				sound.addEventListener(SampleDataEvent.SAMPLE_DATA, soundSampleDataHandler);
				channel = sound.play();
				channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);    
			}
			
			protected function soundSampleDataHandler(event:SampleDataEvent):void
			{
				if (!soundData.bytesAvailable > 0)
				{
					return;
				}
				
				for (var i:int = 0; i < 8192; i++)
				{
					var sample:Number = 0;
					if (soundData.bytesAvailable > 0)
					{
						sample = soundData.readFloat();
					}
					event.data.writeFloat(sample); 
					event.data.writeFloat(sample);  
				}
				
			}
			
			protected function stopPlaying():void
			{
				channel.stop();
				isPlaying = false;
				
			}
			protected function saveFile():void 
			{ 
				trace("Save File");
				var outputFile:File = storageDir.resolvePath("recording.wav"); 
				var outputStream:FileStream = new FileStream(); 
				var wavWriter:WAVWriter = new WAVWriter(); 
				soundData.position = 0;  // rewind to the beginning of the sample 
				
				wavWriter.numOfChannels = 1; // set the inital properties of the Wave Writer 
				wavWriter.sampleBitRate = 16; 
				wavWriter.samplingRate = 44100; 
				trace("here?");
				outputStream.open(outputFile, FileMode.WRITE);  //write out our file to disk.
				wavWriter.processSamples(outputStream, soundData, 44100, 1); // convert our ByteArray to a WAV file. 
				trace("before?");
				outputStream.close();
				storageDir.getDirectoryListingAsync();
			}
			protected function onDirList(e:FileListEvent):void
			{	
				trace("dir list");
				files = new ArrayCollection(e.files);
				storageDir.removeEventListener(FileListEvent.DIRECTORY_LISTING,onDirList);
			}
			private function audioClick(e:IndexChangeEvent):void{
				var urlRequest:URLRequest = new URLRequest(e.target.selectedItem.url);  
				var wav:URLLoader = new URLLoader();  
				wav.dataFormat = 'binary';  
				wav.load(urlRequest);  
				wav.addEventListener(Event.COMPLETE, playWav);
				
				//var req:URLRequest = new URLRequest(e.target.selectedItem.nativePath); 
				//var snd:Sound = new Sound(req); 
				//var channel:SoundChannel = snd.play();
			}
			private function playWav(e:Event):void  
			{  
				var tts:WavSound = new WavSound(e.target.data as ByteArray);  
				tts.play();  
			} 
			
			protected function toggleRecording():void
			{
				if (isRecording)
				{
					isRecording = false;
					//btnRecord.label = "Record";
					stopRecording();
				}
				else
				{
					isRecording = true;
					//btnRecord.label = "Stop Recording";
					startRecording();
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="unsupported"/>
	</s:states>
	<s:Group width="100%" height="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="0x58595b" /></s:fill>
		</s:Rect>
	<s:Label id="lblSupport" text="This feature is not supported on this device." includeIn="unsupported"/>
	<s:VGroup width="100%" height="100%" includeIn="normal" gap="40" horizontalAlign="center" verticalAlign="middle">
		<!--<s:Label width="98%" verticalAlign="justify" color="#FFFFFF" 
				 text="This sample allows you to record audio such as voice memo's using a built-in or external mic. The Microphone.names
				 property will return the list of all available sound input devices found (see init method in code):"/>-->
		
		<s:VGroup top="10" horizontalAlign="center" horizontalCenter="0">
			<s:Label text="Select microphone:"/>
			<s:DropDownList id="micChoices" width="300" height="100" dataProvider="{microphoneList}" selectedIndex="0"/>
		</s:VGroup>
		<s:VGroup bottom="5" gap="15" horizontalCenter="0" width="100%">
			<s:HGroup horizontalCenter="0" verticalAlign="middle" width="100%" horizontalAlign="center">
				<s:Button width="100" height="100" click="toggleRecording()"
						  icon="@Embed('assets/icons-02.png')" enabled="{!isPlaying}"/>
				<!--<s:Button id="btnRecord" label="Record" click="toggleRecording()" enabled="{!isPlaying}"/>-->
				<s:Button id="btnPlay" width="100" height="100" label="Play" click="startPlaying()"
						  enabled="{!isRecording}"/>
			</s:HGroup>
		</s:VGroup>
		<s:Button width="100" height="100" label="SAVE" click="navigator.popView();"/>
		<!--<s:List dataProvider="{files}" width="90%" height="300" labelField="name" contentBackgroundColor="haloBlue" borderVisible="true" borderColor="0x000000" change="audioClick(event);"/>-->
	</s:VGroup>
		</s:Group>
</s:View>
